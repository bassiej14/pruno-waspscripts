{$UNDEF SCRIPT_ID}{$DEFINE SCRIPT_ID := '34f20198-b834-4087-aff7-eb61ea7add1c'}
{$UNDEF SCRIPT_REVISION}{$DEFINE SCRIPT_REVISION := '16'}
{$IFDEF WINDOWS}
{$ENDIF}
{$I SRL-T/osr.simba}
{$I WaspLib/osr.simba}

begin
  Login.PlayerIndex := 0;
  WLSettings.Antiban.Enabled         := True; //Enables Most Antiban
  WLSettings.Breaks                  := True; //Enables Short Breaks
  WLSettings.Sleep.Enabled           := True; //Enables Sleep Breaks
  WLSettings.RemoteInput.Enabled     := True; //Enables Remote Input
  WLSettings.RemoteInput.HUDReport   := False; //Enables Graphical Progress Report
  //RSHeightmap .Enabled := True;     RSClient.Image.Clear(); //terminatescript();
end;


type
  ESeed = (GOLOVANOVA, BOLOGANO, LOGAVANO);

var
  CurrentSeed = ESeed.BOLOGANO;

const
  UpgradeSeedBasedOnLevel = True;
  HOPIFOCCUPIED = True;
  WORLDHOPLIST = [303 .. 307, 369, 370, 374 .. 378, 386 .. 390, 477 .. 482, 484 .. 496];
  WateringCans := 23;
  PlanterArray5: TPointArray := [[2696, 2406], [2696, 2418], [2696, 2432], [2696, 2442], [2716, 2442], [2716, 2432], [2716, 2418], [2716, 2406]];
  WalkArray5: TPointArray := [[2706, 2406], [2706, 2418], [2706, 2432], [2706, 2442], [2708, 2442], [2706, 2444], [2706, 2432], [2706, 2418], [2706, 2406]];


type
  EFarmerState = (GET_SEEDS, WAIT_STATE, WAIT_SKIP_STATE, WALK_SPOT, PLANT_SEED, WATER_SEED, CLEAR_SEED, HARVEST_SEED, GET_WATER, GAMEFINISHED, GAMESTART, LEVEL_UP, CLOSE_CONTEXT, HOPWORLDS, END_SCRIPT, CANCEL_USE, MOUSE_MISSED_PATCH);
  TTitheFarmer = record
     (TBaseWalkerScript) State: EFarmerState;
    Patches: TRSObject;
    WalkLocations: TRSObject;
    Worlds: TIntegerArray;
    walkSpot: Int32;
    PlanterArray: TPointArray;
    WalkArray: TPointArray;
    nonModifiedPlanterArray: TPointArray;
    SeedItem: TRSItem;
    SeedPlanted: Boolean;
  end;

procedure TAntiban.Setup; override;
begin
  Antiban.Skills := [ERSSkill.FARMING, ERSSkill.TOTAL];
  Antiban.MinZoom := 0;
  Antiban.MaxZoom := 5;
  inherited;
end;

procedure TTitheFarmer.SetupObjects();
begin
  Self.RSW.Setup([RSRegions.TITHE_FARM]);
  //patches.Setup();
  Patches.UpText := [];
  Patches.Finder.Colors += CTS2(3035994, 11, 0.05, 0.19);
  Patches.Setup(4, PlanterArray);
  SeedItem := Self.GetSeedString();
  walkSpot := 0;
  SeedPlanted := False;
  RSObjects.TitheWaterBarrels.Setup(['> Water B']);
end;

procedure TTitheFarmer.Init(MaxActions: Int32; MaxTime: Int64); override;
begin
  inherited;

  Self.SetupObjects();

  PlanterArray := PlanterArray5;
  WalkArray := WalkArray5;
  nonModifiedPlanterArray := PlanterArray;
end;


function TTitheFarmer.IsLastStep(): Boolean;
begin
  Result := ((Self.walkSpot) = (High(PlanterArray)));
end;

function TTitheFarmer.GetSeedString(): String;
begin
  case CurrentSeed of
    ESeed.BOLOGANO:   Result := 'Bologano seed';
    ESeed.GOLOVANOVA: Result := 'Golovanova seed';
    ESeed.LOGAVANO:   Result := 'Logavano seed';
  end;
end;

function TTitheFarmer.PlantSeed(): Boolean;
var
  SeedCount: Int32;
  Cuboid: TCuboid;
begin
  SeedCount := Inventory.CountItemStack(Self.GetSeedString());
  if (SeedCount = 0) then
  begin
    Self.ProgressStep();
    Exit;
  end;


  if not Inventory.SetSelectedItem(Self.GetSeedString()) then
    Exit;
  Cuboid := RSW.GetCuboidMS(PlanterArray[Self.walkSpot],[1.5,1.5,0]);
  Mouse.Click(Cuboid.MinAreaRect(),MOUSE_LEFT);

  Result := WaitUntil(Inventory.CountItemStack(Self.GetSeedString()) <> SeedCount, 50, 6000);
  Self.SeedPlanted := True;
  Inventory.SetSelectedItem('Gricoller''s fertiliser');

  Cuboid := RSW.GetCuboidMS(PlanterArray[Self.walkSpot], [1.5,1.5,0]);
  Mouse.Click(Cuboid.MinAreaRect(),MOUSE_LEFT);
  Wait(2000, 2500);
  if not WaitUntil(Mainscreen.IsUpText(['Water']), 50, 3000) then
    exit;
  Mouse.Click(MOUSE_LEFT);
  WaitUntil(not (MainScreen.IsUpText(['Water'], 50)), 200, 2000);
end;

function TTitheFarmer.WaterSeed(): Boolean;
begin
  if not (MainScreen.IsUpText(['Water'], 50)) then
    Exit;
  Mouse.Click(MOUSE_LEFT);
  Wait(500, 1000);
  Result := WaitUntil(not (MainScreen.IsUpText(['Water'], 50)), 200, 2000);
end;

function TTitheFarmer.ClearSeed(Harvest: Boolean= False): Boolean;
var
  StartXP: Int32 := XPBar.Read();
begin
  Mouse.Click(MOUSE_LEFT);
  if Harvest then
  begin
    if Result := WaitUntil(XPBar.Read > StartXP,100,5000) then
      TotalActions += 1;
  end else
  begin
    Wait(2500, 2800);
    Result := True;
  end;
  Self.ProgressStep();
end;

function TRSWalkerObject._UpTextCheck(out shouldExit: Boolean): Boolean; override;
var
  upText: String;
begin
  shouldExit := True;

  if (MainScreen.Mode = ERSClientMode.FIXED) and MainScreen.HasInterface() then
    Exit;

  upText := MainScreen.GetUpText();



  if Self.Filter.UpText and (Self.UpText in upText) then
    Exit(True);

  shouldExit := False;
end;

function TTitheFarmer.GetWater(): Boolean;
begin
  if (Inventory.SetSelectedItem('Watering can')) and RSObjects.TitheWaterBarrels.Click then
    Result := WaitUntil(Inventory.CountItem('Watering can') = 0, 2000, 60000);

  Wait(800, 1200);
  if not Result then
    Exit;

  RSW.WebWalk(WalkArray[Self.walkSpot]);
  PlanterArray := nonModifiedPlanterArray;
end;


function TTitheFarmer.InFarm(pos: TPoint = []): Boolean;
begin
  if pos = [] then
    pos := Self.RSW.GetMyPos();
  Result := pos.X >= 2613;
end;

function TTitheFarmer.OutsideFarm(pos: TPoint = []): Boolean;
begin
  if pos = [] then
    pos := Self.RSW.GetMyPos();
  Result := pos.X <= 2611;
end;


function TTitheFarmer.GetSeeds(): Boolean;
begin
  if not RSObjects.TitheTable.WalkClick() then
      Exit;

  Minimap.WaitMoving();

  if (UpgradeSeedBasedOnLevel) then
    case BaseStats.GetCurrentLevel(ERSSkill.FARMING) of
      00..33: TerminateScript('You need at least level 34 farming!');
      34..53: CurrentSeed := ESeed.GOLOVANOVA;
      54..73: CurrentSeed := ESeed.BOLOGANO;
      else    CurrentSeed := ESeed.LOGAVANO;
    end;

  if WaitUntil(Chat.ClickOption(Self.GetSeedString()), 200, 4000) then
    Result := WaitUntil(Inventory.ContainsItem(Self.GetSeedString()), 200, 4000);
end;

function TTitheFarmer.RestartGame(): Boolean;
begin
  if not RSObjects.TitheDoor.WalkClick() then
    Exit;

  Minimap.WaitMoving();

  Result := WaitUntil(Self.InFarm(), 100, 5000);

  if Result then
  begin
    Self.walkSpot := 0;
    PlanterArray := nonModifiedPlanterArray;
    Self.GetWater();
  end;
end;



function TTitheFarmer.PatchWet(point: TPoint): Boolean
var
  B: TBox;
  TPA: TPointArray;
begin
  B := Box(point, 15, 15);
  TPA := B.ToRectangle.ToTPA;
  TPA.Fill;
  TPA := Mainscreen.Filter(TPA);

  Result := SRL.CountColor(CTS2(6125951, 2, 0.10, 1.59), TPA.Bounds) >= 1;
end;

function TTitheFarmer.checkPlants(CheckHealth: Boolean= False): Boolean;
var
  i: Int32;
begin
  if (Self.SeedPlanted = False) then
    Exit;
  Self.SeedPlanted := False;

  for i := 0 to High(Planterarray) do
  begin
    if not Minimap.PointInZoomRectangle(RSW.WorldToMM(Planterarray[i])) then
    begin
      RSW.WebWalk(Walkarray[I]);
      WaitUntil(RSW.AtTile(Walkarray[I], 15), 50, 5000);
    end;

    if (Self.checkPlant(RSW.GetCuboidMS(PlanterArray[i],[1.5, 1.5, 0],[1, 1]))) then
    begin
      Self.SeedPlanted := True;
      if not CheckHealth then
        Exit(True);

      if not Self.PatchWet(RSW.GetTileMS(Planterarray[I]).Mean()) then
        Exit(True);
    end;
  end;
end;

function TTitheFarmer.ProgressStep(): Boolean;
begin
  if Self.IsLastStep() then
  begin
    Self.walkSpot := 0;
  end
  else
  begin
    Self.walkSpot += 1;
  end;
  Result := True;
end;


function TTitheFarmer.WaitForSpot(Destination: TPoint): Boolean;
begin
  if (not (RSW.AtTile(Destination, 20))) then
  begin
    result := WaitUntil(RSW.AtTile(Destination, 15), 50, 5000);
  end
  else
  begin
    result := True;
  end;
end;

function TTitheFarmer.WalkToSpot(Destination: TPoint): Boolean;
begin
  if (not (RSW.AtTile(Destination, 20))) then
  begin
    RSW.WebWalk(Destination);
    result := WaitUntil(RSW.AtTile(Destination, 15), 50, 5000);
  end
  else
  begin
    result := True;
  end;
end;

function TTitheFarmer.checkPlant(Cuboid: TCuboid): Boolean;
begin
  Cuboid := Mainscreen.Filter(Cuboid);
  if (Self.GetSeedString() = 'Bologano seed') then
  begin
    Result := SRL.CountColor(CTS2(6925129, 32, 0.50, 0.76), Cuboid.Bounds) >= 1
  end
  else if (Self.GetSeedString() = 'Golovanova seed') then
  begin
    Result := SRL.CountColor(CTS2(6134741, 18, 0.32, 1.60), Cuboid.Bounds) >= 1
  end
  else if (Self.GetSeedString() = 'Logavano seed') then
  begin
    Result := SRL.CountColor(CTS2(10563493, 34, 0.08, 1.34), Cuboid.Bounds) >= 1
  end
  else
  begin
    Result := False;
  end
end;



function TTitheFarmer.GetState(): EFarmerState;
var
  me: TPoint;
  upText, tmp: String;
  MSPnt: TPoint;
  CurrentPatch: TCuboid;
  hasEnoughWater: Boolean;
begin
  me := Self.RSW.GetMyPos();

  if Chat.LeveledUp() then
    Exit(EFarmerState.LEVEL_UP);

  if (HOPIFOCCUPIED and me.WithinDistance(WalkArray[Self.walkSpot], 40) and Self.ResultCheckForPlayers()) then
    Exit(EFarmerState.HOPWORLDS);

  if Self.OutsideFarm(me) then
  begin
    if not Inventory.ContainsItem(Self.GetSeedString()) then
      Exit(EFarmerState.GET_SEEDS);

    Exit(EFarmerState.GAMESTART);
  end;

  if not Inventory.ContainsItem(Self.GetSeedString()) and not Self.Checkplants() then
    Exit(EFarmerState.GAMEFINISHED);

  hasEnoughWater := Inventory.CountItem('Watering can') >= (WateringCans * 0.7);

  if hasEnoughWater and not Self.Checkplants() then
    Exit(EFarmerState.GET_WATER);

  if not Minimap.PointInZoomRectangle(RSW.WorldToMM(PlanterArray[Self.walkSpot])) then
    RSW.WebWalk(WalkArray[Self.walkSpot], 4, 0.2);

  MSPnt := RSW.GetTileMS(PlanterArray[Self.walkSpot]).Mean();
  if Self.PatchWet(MSPnt) then
    Exit(EFarmerState.WAIT_SKIP_STATE);

  CurrentPatch := RSW.GetCuboidMS(PlanterArray[Self.walkSpot],[1.5,1.5,0],[1,1]);
  if not checkPlant(CurrentPatch) then
  begin
    if Self.checkPlants(True) or hasEnoughWater then
      Exit(EFarmerState.WAIT_SKIP_STATE);

    Exit(EFarmerState.PLANT_SEED);
  end;

  Mouse.Move(CurrentPatch);

  repeat
    tmp := MainScreen.GetUpText();
    Wait(20, 50);
    upText := MainScreen.GetUpText();
  until tmp = upText;

  if upText.ContainsAny(['Use', '>']) then
    Exit(EFarmerState.CANCEL_USE);

  if upText.ContainsAny(['Walk here']) and checkPlant(CurrentPatch) then
    Exit(EFarmerState.WAIT_SKIP_STATE);

  if upText.ContainsAny(['Walk here']) and not checkPlant(CurrentPatch) and
     ((Inventory.CountItem(Self.GetSeedString) = 0) or hasEnoughWater) then
    Exit(EFarmerState.WAIT_SKIP_STATE);

  if upText.ContainsAny(['Water']) then
    Exit(EFarmerState.WATER_SEED);

  if upText.ContainsAny(['Clear']) then
    Exit(EFarmerState.CLEAR_SEED);

  if upText.ContainsAny(['Harvest']) then
    Exit(EFarmerState.HARVEST_SEED);

  Exit(EFarmerState.MOUSE_MISSED_PATCH);
end;

procedure TTitheFarmer.Run(MaxActions: Int32; MaxTime: Int64);
begin
  Self.Init(MaxActions, MaxTime);

  repeat
    Self.State := Self.GetState();
    Self.SetAction(ToStr(Self.State));

    case State of
      EFarmerState.WAIT_STATE: Wait(50, 100);
      EFarmerState.WAIT_SKIP_STATE: Self.ProgressStep();
      EFarmerState.WALK_SPOT: Self.WalkToSpot(WalkArray[Self.walkSpot]);
      EFarmerState.PLANT_SEED: if not Self.DoAntiban(False, False) then Self.PlantSeed();
      EFarmerState.WATER_SEED: Self.WaterSeed();
      EFarmerState.CLEAR_SEED: Self.ClearSeed();
      EFarmerState.HARVEST_SEED: Self.ClearSeed(True);
      EFarmerState.GET_WATER: begin Self.DoAntiban(); Self.GetWater(); end;
      EFarmerState.GAMEFINISHED: begin Self.DoAntiban(); Self.EndGame(); end;
      EFarmerState.GAMESTART: Self.RestartGame();
      EFarmerState.GET_SEEDS: Self.GetSeeds();
      EFarmerState.HOPWORLDS: begin Self.CheckForPlayers(); Self.DoAntiban(); end;
      EFarmerState.LEVEL_UP: Chat.HandleLevelUp();
      EFarmerState.END_SCRIPT: Break;
      EFarmerState.CANCEL_USE: ChooseOption.Select('Cancel');
      EFarmerState.MOUSE_MISSED_PATCH: Antiban.SmallRandomMouse();
    end;
  until Self.ShouldStop();
end;

var
  TitheFarmer: TTitheFarmer;

//ugly code:
function TTitheFarmer.EndGame(): Boolean;
var
StartXP: Int32 := XPBar.Read;
begin
  if Inventory.ContainsAny(['Bologano fruit', 'Golovanova fruit', 'Logavano fruit']) then
  begin
    XPBar.EarnedXP();
    if not RSObjects.TitheSacks.WalkClick then
      Exit;
    Minimap.WaitMoving();
    if not XPBar.WaitXP(5000) then
      Exit;
  end;

  if not RSObjects.TitheDoor.WalkClick() then
    Exit;

  Minimap.WaitMoving();

  Result := WaitUntil(Self.OutsideFarm(), 200, 5000);
end;

//stolen code from flight to hop worlds..
function TRSLogout.GetCurrentWorld: Int32;
begin
  if (not Self.IsWorldSwitcherOpen()) then
  begin
    Self.Open();
    if Self.GetButton(ERSLogoutButton.WORLD_SWITCHER).Click then
      WaitUntil(Self.IsWorldSwitcherOpen(), 500, 6000);
  end;

  Result := OCR.RecognizeNumber([Self.Bounds.X1+17,Self.Bounds.Y1,Self.Bounds.X1+150,Self.Bounds.Y1+20], TOCRColorRule.Create([2070783]), RS_FONT_BOLD_12);
end;

function TRSLogout.SwitchWorlds(World:Int32): Boolean;
var
  B: TBox;
  Found,Down: Boolean;
  ListBox: TBox := [Self.Bounds.X1+17,Self.Bounds.Y1+36,Self.Bounds.X1+42,Self.Bounds.Y2-38];
  VisibleWorld: Int32;
begin
  if (Self.GetCurrentWorld = World) then Exit(True);

  // Read the first visible members world from the world list
  VisibleWorld := OCR.RecognizeNumber(ListBox, TOCRColorRule.Create([61680,14737632]), RS_FONT_PLAIN_12);
  Mouse.Move(Self.Bounds.Expand(-5,-36), True);

  While InRange(Self.GetScrollPosition, 1, 99) do
  begin
    if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680,14737632]), B) = 1 then
    begin
      Found := True;
      Break;
    end;

    if World > VisibleWorld then
    begin
      Mouse.Scroll(SRL.NormalRange(1,3), True);
      Down := True;
    end else if World <= VisibleWorld then
    begin
      Mouse.Scroll(SRL.NormalRange(1,3), False);
      Down := False;
    end;
  end;

  if (not Found) then
    if Down then
    begin
      While Self.GetScrollPosition >= 1 do
      begin
        if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680,14737632]), B) = 1 then
        begin
          Found := True;
          Break;
        end;

        Mouse.Scroll(SRL.NormalRange(1,3), False);
      end;
    end else
    begin
      While Self.GetScrollPosition <= 99 do
      begin
        if OCR.LocateText(ListBox, ToStr(World), RS_FONT_PLAIN_12,  TOCRColorRule.Create([61680,14737632]), B) = 1 then
        begin
          Found := True;
          Break;
        end;

        Mouse.Scroll(SRL.NormalRange(1,3), True);
      end;
    end;

  Result := Found;

  if Result then
  begin
    Mouse.Click(B, MOUSE_LEFT);
    WaitUntil((Self.GetCurrentWorld = World), 75, 15000);
  end;
end;

function TTitheFarmer.HopWorlds(): Boolean;
var
  RandWorld: Int32;
  MyWorld: Int32 := Logout.GetCurrentWorld;
  WorldList: TIntegerArray := WORLDHOPLIST;
begin
  Minimap.WaitPlayerMoving(300, SRL.NormalRange(4500, 7000));
  WorldList.Remove(MyWorld, True);
  RandWorld := WorldList[Random(0, Length(WorldList) - 1)];
  writeln('Hopping to world ' + ToStr(RandWorld));
  Chat.ClickContinue();
  Result := Logout.SwitchWorlds(RandWorld);
end;

procedure TTitheFarmer.CheckForPlayers();
var
  Dots: TPointArray := Minimap.GetDots (ERSMinimapDot.PLAYER);
begin
  if Length(Dots) < 1 then
    Exit;
  FilterPointsDist(Dots, 0, 40, Minimap.Center.X, Minimap.Center.Y);
  if Length(Dots) < 1 then
    Exit;
  if HOPIFOCCUPIED then
  begin
    Writeln('Player(s) detected nearby, hopping worlds...');
    if (not Self.HopWorlds()) then
    begin
      EXIT;
      TerminateScript('Failed to hop worlds');
    end;
    Exit;
  end;
end;

function TTitheFarmer.ResultCheckForPlayers(): Boolean;
var
  dots: TPointArray;
begin
  dots := Minimap.GetDots(ERSMinimapDot.PLAYER);
  FilterPointsDist(dots, 0, 40, Minimap.Center().X, Minimap.Center().Y);
  Result := Length(dots) > 0;
end;

begin
  TitheFarmer.Run(WLSettings.MaxActions, WLSettings.MaxTime);
end.
